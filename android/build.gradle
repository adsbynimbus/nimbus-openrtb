plugins {
    id "com.android.library" version "$versions_agp"
    id "kotlin-android" version "$versions_kotlin"
    id "org.jetbrains.dokka" version "$versions_dokka"
    id "de.mannodermaus.android-junit5" version "$versions_android_junit5"
    id "maven-publish"
}

def isCiBuild = System.getenv('GITHUB_WORKFLOW') != null

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 17
        versionName project.version
        consumerProguardFiles 'consumer-proguard-rules.pro'

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        // The following build type is used to test the R8 rules
        consumer {
            initWith debug
            postprocessing {
                removeUnusedCode true
                obfuscate true
                optimizeCode true
                proguardFiles 'consumer-proguard-rules.pro'
            }
        }
    }

    testBuildType "consumer"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    sourceSets.each {
        it.java.srcDirs += "src/$it.name/kotlin"
    }
}

dependencies {
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$versions_kotlin"

    implementation "androidx.annotation:annotation:$versions_androidx"

    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$versions_kotlin"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$versions_kotlin"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$versions_kotlin"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$versions_junit5"
    testImplementation "org.spekframework.spek2:spek-dsl-jvm:$versions_spek"
    testImplementation "org.spekframework.spek2:spek-runner-junit5:$versions_spek"
    testImplementation "com.google.code.gson:gson:$versions_gson"
}

configurations {
    sourcesElements {
        attributes {
            attribute(Attribute.of("org.gradle.docstype", String), DocsType.SOURCES)
        }
    }
}

tasks.named("dokka").configure {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}

def javadocTask = tasks.register("dokkaJar", Jar) {
    archiveClassifier = 'javadoc'
    from tasks.named('dokka')
}

def sourcesTask = tasks.register('sourcesJar', Jar) {
    archiveClassifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    sourcesElements(sourcesTask) {
        builtBy(sourcesJar)
    }
}

afterEvaluate {
    components.release.addVariantsFromConfiguration(configurations.sourcesElements) {
        mapToMavenScope("compile")
    }
    components.release.withVariantsFromConfiguration(configurations.releaseApiPublication) {
        if (configurationVariant.artifacts.isEmpty()) { skip() }
    }
    components.release.withVariantsFromConfiguration(configurations.releaseRuntimePublication) {
        if (configurationVariant.artifacts.isEmpty()) { skip() }
    }

    publishing {
        publications {
            library(MavenPublication) {
                from components.release

                artifact javadocTask
            }
        }
        repositories {
            maven {
                name "bintray"
                url "https://api.bintray.com/maven/timehop/$rootProject.name/$project.name/;publish=${isCiBuild ? 1 : 0}"
                credentials(PasswordCredentials)
            }
        }
    }
}