plugins {
    id "com.android.library" version "$agp"
    id "kotlin-multiplatform" version "$kgp"
    id "org.jetbrains.dokka" version "$dokka"
    id "maven-publish"
}

def isCiBuild = System.getenv('GITHUB_WORKFLOW') != null

android {
    compileSdkVersion 30
    defaultConfig {
        minSdkVersion 17
        versionName project.version

        consumerProguardFiles 'consumer-proguard-rules.pro'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            java.srcDirs = ["src/androidMain/kotlin"]
            manifest.srcFile "src/androidMain/AndroidManifest.xml"
            res.srcDirs = ["src/androidMain/res"]
        }
    }
}

kotlin {
    android {
        publishLibraryVariants "release"
        compilations.all {
            kotlinOptions {
                jvmTarget = JavaVersion.VERSION_1_8.toString()
                useIR = true
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                compileOnly(kotlin("stdlib"))
            }
        }
        commonTest {
            dependencies {
                implementation(kotlin("test-common"))
                implementation(kotlin("test-annotations-common"))
                implementation("org.spekframework.spek2:spek-dsl-metadata:$spek")
            }
        }
        androidMain {
            dependencies {
                implementation("androidx.annotation:annotation:$androidx_annotation")
            }
        }
        androidTest {
            dependencies {
                implementation(kotlin("test-junit5"))
                implementation("com.google.code.gson:gson:$gson")
                implementation "org.spekframework.spek2:spek-dsl-jvm:$spek"

                runtimeOnly(kotlin("reflect"))
                runtimeOnly("org.spekframework.spek2:spek-runner-junit5:$spek")
            }
        }
    }
}

tasks.withType(org.jetbrains.dokka.gradle.DokkaTask.class).configureEach {
    dokkaSourceSets {
        configureEach {
            sourceLink {
                localDirectory.set(file("src/$it/kotlin"))
                remoteUrl.set(uri("https://github.com/timehop/nimbus-openrtb/kotlin/src/$it/kotlin").toURL())
                remoteLineSuffix.set("#L")
            }
        }
    }
}

def javadocTask = tasks.register("dokkaJar", Jar) {
    archiveClassifier = 'javadoc'
    from tasks.named('dokkaJavadoc')
}

publishing {
    afterEvaluate {
        publications {
            named("androidRelease").configure {
                artifact javadocTask
            }
        }
    }
    repositories {
        maven {
            name "bintray"
            url "https://api.bintray.com/maven/timehop/$rootProject.name/$project.name/;publish=${isCiBuild ? 1 : 0}"
            credentials(PasswordCredentials)
        }
    }
}

System.getenv("GITHUB_REPOSITORY")?.let {
    publishing {
        repositories {
            maven {
                name = "github"
                url = uri("https://maven.pkg.github.com/$it")
                credentials(PasswordCredentials)
            }
        }
    }
}